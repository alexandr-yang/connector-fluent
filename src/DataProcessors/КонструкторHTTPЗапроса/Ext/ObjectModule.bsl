
#Область ОписаниеПеременных

// Контекст конструктора
Перем Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Установить аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Аутентификация(Аутентификация) Экспорт
	
	Если КонструкторHTTPСлужебный.ЭтоАутентификацияAWS4(Аутентификация) Тогда
		АутентификацияAWS4(
			Аутентификация.ИдентификаторКлючаДоступа, Аутентификация.СекретныйКлюч,
			Аутентификация.Сервис, Аутентификация.Регион);
	ИначеЕсли КонструкторHTTPСлужебный.ЭтоАутентификацияBasic(Аутентификация) Тогда
		АутентификацияBasic(Аутентификация.Пользователь, Аутентификация.Пароль);
	ИначеЕсли КонструкторHTTPСлужебный.ЭтоАутентификацияBearerToken(Аутентификация) Тогда
		АутентификацияBearerToken(Аутентификация.Токен);
	ИначеЕсли КонструкторHTTPСлужебный.ЭтоАутентификацияDigest(Аутентификация) Тогда
		АутентификацияDigest(Аутентификация.Пользователь, Аутентификация.Пароль);
	ИначеЕсли КонструкторHTTPСлужебный.ЭтоАутентификацияОС(Аутентификация) Тогда
		АутентификацияОС();
	КонецЕсли; // BSLLS:IfElseIfEndsWithElse-off
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать AWS4-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  ИдентификаторКлючаДоступа - Строка
//  СекретныйКлюч - Строка
//  Сервис - Строка
//  Регион - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияAWS4(ИдентификаторКлючаДоступа = "", СекретныйКлюч = "", Сервис = "", Регион = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияAWS4(
		ИдентификаторКлючаДоступа, СекретныйКлюч, Сервис, Регион); // BSLLS:MissingCommonModuleMethod-off
	Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Basic-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияBasic(Пользователь = "", Пароль = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияBasic(Пользователь, Пароль); // BSLLS:MissingCommonModuleMethod-off
	Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать BearerToken-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Токен - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияBearerToken(Токен = "") Экспорт
	
	Ключ = "Authorization";
	Значение = СтрШаблон("Bearer %1", Токен);
	ДобавитьЗаголовок(Ключ, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Digest-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияDigest(Пользователь = "", Пароль = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияDigest(Пользователь, Пароль); // BSLLS:MissingCommonModuleMethod-off
	Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать аутентификацию ОС для выполнения HTTP-запроса
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияОС() Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияОС(); // BSLLS:MissingCommonModuleMethod-off
	Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить адрес ресурса
//
// Параметры:
//  АдресРесурса - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АдресРесурса(АдресРесурса) Экспорт
	
	Контекст.АдресРесурса = ПодготовитьАдресРесурса(АдресРесурса);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить заголовок HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьЗаголовок(Ключ, Значение = "") Экспорт
	
	Контекст.ДополнительныеПараметры.Заголовки.Вставить(Ключ, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить заголовки HTTP-запроса
//
// Параметры:
//  Заголовки - Структура, Соответствие
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьЗаголовки(Заголовки) Экспорт
	
	Для Каждого Заголовок Из Заголовки Цикл
		ДобавитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить код состояния для повтора HTTP-запроса
//
// Параметры:
//  КодСостояния - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКодСостоянияДляПовтора(КодСостояния) Экспорт
	
	Если Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний = Неопределено Тогда
		Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний = Новый Массив;
	КонецЕсли;
	
	Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний.Добавить(КодСостояния);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить коды состояния для повтора HTTP-запроса
//
// Параметры:
//  КодыСостояния - Массив из Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКодыСостоянияДляПовтора(КодыСостояния) Экспорт
	
	Для Каждого КодСостояния Из КодыСостояния Цикл
		ДобавитьКодСостоянияДляПовтора(КодСостояния);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить Cookie HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКуку(Ключ, Значение = "") Экспорт
	
	Контекст.ДополнительныеПараметры.Cookies.Вставить(Ключ, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить Cookies HTTP-запроса
//
// Параметры:
//  Куки - Структура, Соответствие
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКуки(Куки) Экспорт
	
	Для Каждого Кука Из Куки Цикл
		ДобавитьКуку(Кука.Ключ, Кука.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить параметр HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьПараметрЗапроса(Ключ, Значение = "") Экспорт
	
	Если Контекст.ДополнительныеПараметры.ПараметрыЗапроса = Неопределено Тогда
		Контекст.ДополнительныеПараметры.ПараметрыЗапроса = Новый Соответствие;
	КонецЕсли;
	
	Контекст.ДополнительныеПараметры.ПараметрыЗапроса.Вставить(Ключ, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить параметры HTTP-запроса
//
// Параметры:
//  ПараметрыЗапроса - Структура, Соответствия
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьПараметрыЗапроса(ПараметрыЗапроса) Экспорт
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ДобавитьПараметрЗапроса(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить файл для отправки
//
// Параметры:
//  Имя - Строка - Имя поля формы
//  ИмяФайла - Строка
//  Данные - ДвоичныеДанные - Двоичные данные файла
//  Тип - Строка - MIME-тип файла
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьФайл(Имя, ИмяФайла, Данные = Неопределено, Тип = Неопределено) Экспорт
	
	ОтправляемыйФайл = КоннекторHTTP.НовыйОтправляемыйФайл(
		Имя, ИмяФайла, Данные, Тип); // BSLLS:MissingCommonModuleMethod-off
	Контекст.ДополнительныеПараметры.Файлы.Добавить(ОтправляемыйФайл);
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить файлы для отправки
//
// Параметры:
//  Файлы - Массив из Структура:
//    * Имя - Строка - Имя поля формы
//    * ИмяФайла - Строка
//    * Данные - ДвоичныеДанные - Двоичные данные файла
//    * Тип - Строка - MIME-тип файла
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьФайлы(Файлы) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		ДобавитьФайл(Файл.Имя, Файл.ИмяФайла, Файл.Данные, Файл.Тип);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать защищенное соединение HTTPS
//
// Параметры:
//  Значение - Булево
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ЗащищенноеСоединение(Значение = Истина) Экспорт
	
	Контекст.ЗащищенноеСоединение = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать клиентский сертификатор SSL
//
// Параметры:
//  СертификатКлиента - СертификатКлиентаФайл, СертификатКлиентаWindows
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция КлиентскийСертификатSSL(СертификатКлиента) Экспорт
	
	Контекст.ДополнительныеПараметры.КлиентскийСертификатSSL = СертификатКлиента;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить коэффициент экспоненциальной задержки при повторе HTTP-запроса
//
// Параметры:
//  Значение - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция КоэффициентЭкспоненциальнойЗадержки(Значение) Экспорт
	
	Контекст.ДополнительныеПараметры.КоэффициентЭкспоненциальнойЗадержки = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить максимальное время повторов между HTTP-запросами
//
// Параметры:
//  Значение - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МаксимальноеВремяПовторов(Значение) Экспорт
	
	Контекст.ДополнительныеПараметры.МаксимальноеВремяПовторов = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить максимальное количество повторов HTTP-запросов
//
// Параметры:
//  Значение - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МаксимальноеКоличествоПовторов(Значение) Экспорт
	
	Контекст.ДополнительныеПараметры.МаксимальноеКоличествоПовторов = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса
//
// Параметры:
//  Метод - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Метод(Метод) Экспорт
	
	Контекст.Метод = Метод;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса CONNECT
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодCONNECT() Экспорт
	
	Метод = КонструкторHTTP.МетодCONNECT();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса DELETE
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодDELETE() Экспорт
	
	Метод = КонструкторHTTP.МетодDELETE();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса GET
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодGET() Экспорт
	
	Метод = КонструкторHTTP.МетодGET();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса HEAD
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодHEAD() Экспорт
	
	Метод = КонструкторHTTP.МетодHEAD();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса OPTIONS
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодOPTIONS() Экспорт
	
	Метод = КонструкторHTTP.МетодOPTIONS();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса PATCH
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPATCH() Экспорт
	
	Метод = КонструкторHTTP.МетодPATCH();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса POST
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPOST() Экспорт
	
	Метод = КонструкторHTTP.МетодPOST();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса PUT
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPUT() Экспорт
	
	Метод = КонструкторHTTP.МетодPUT();
	Возврат Метод(Метод);
	
КонецФункции

// Установить метод HTTP-запроса TRACE
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодTRACE() Экспорт
	
	Метод = КонструкторHTTP.МетодTRACE();
	Возврат Метод(Метод);
	
КонецФункции

// Отправить HTTP-запрос
//
// Возвращаемое значение:
//  ОбработкаОбъект.ОбработчикHTTPОтвета
//
Функция Отправить() Экспорт
	
	УРЛ = СформироватьУРЛ();
	Ответ = КоннекторHTTP.ВызватьМетод(
		Контекст.Метод, УРЛ, Контекст.ДополнительныеПараметры, Контекст.Сессия); // BSLLS:MissingCommonModuleMethod-off
	Возврат КонструкторHTTPСлужебный.ОбработчикHTTPОтвета()
		.Инициализировать(Ответ);
	
КонецФункции

// Установить параметры HTTP-запроса
//
// Параметры:
//  Параметры - Структура - см. КонструкторHTTP.ПараметрыЗапроса
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Параметры(Параметры) Экспорт
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "АдресРесурса") Тогда
		АдресРесурса(Параметры.АдресРесурса);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "АдреЗащищенноеСоединениесРесурса") Тогда
		ЗащищенноеСоединение(Параметры.ЗащищенноеСоединение);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "Метод") Тогда
		Метод(Параметры.Метод);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "Порт") Тогда
		Порт(Параметры.Порт);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "Сервер") Тогда
		Сервер(Параметры.Сервер);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЕстьЭлементКоллекции(Параметры, "Таймаут") Тогда
		Таймаут(Параметры.Таймаут);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить порт
//
// Параметры:
//  Значение - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Порт(Значение) Экспорт
	
	Контекст.Порт = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Проверять сертификат сервера
//
// Параметры:
//  Значение - Булево, СертификатыУдостоверяющихЦентровФайл
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ПроверятьSSL(Значение = Истина) Экспорт
	
	Контекст.ДополнительныеПараметры.ПроверятьSSL = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать прокси для выполнения HTTP-запроса
//
// Параметры:
//  ИнтернетПрокси - ИнтернетПрокси
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Прокси(ИнтернетПрокси) Экспорт
	
	Контекст.ДополнительныеПараметры.Прокси = ИнтернетПрокси;
	Возврат ЭтотОбъект;
	
КонецФункции

// Разрешить перенаправление HTTP-запроса
//
// Параметры:
//  Значение - Булево
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция РазрешитьПеренаправление(Значение = Истина) Экспорт
	
	Контекст.ДополнительныеПараметры.РазрешитьПеренаправление = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить адрес сервера
//
// Параметры:
//  АдресСервера - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Сервер(АдресСервера) Экспорт
	
	Контекст.Сервер = ПодготовитьАдресСервера(АдресСервера);
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить настройки сессии для HTTP-запроса
//
// Параметры:
//  Сессия - Структура - см. КоннекторHTTP.СоздатьСессию
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Сессия(Сессия) Экспорт
	
	ЗаполнитьЗначенияСвойств(Контекст.Сессия, Сессия);
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить таймаут выполнения HTTP-запроса
//
// Параметры:
//  Значение - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Таймаут(Значение) Экспорт
	
	Контекст.ДополнительныеПараметры.Таймаут = Значение;
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить тело HTTP-запроса
//
// Параметры:
//  Значение - Структура, Массив, Соответствие, ДвоичныеДанные, Строка
//  ЗаписатьJSON - Булево
//  ПараметрыПреобразованияJSON - Структура
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ТелоЗапроса(Значение, ЗаписатьJSON = Ложь, ПараметрыПреобразованияJSON = Неопределено) Экспорт
	
	Если ЗаписатьJSON Тогда
		Контекст.ДополнительныеПараметры.JSON = Значение;
		Контекст.ДополнительныеПараметры.ПараметрыПреобразованияJSON = ПараметрыПреобразованияJSON;
	Иначе
		Контекст.ДополнительныеПараметры.Данные = Значение;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить URL HTTP-запроса
//
// Параметры:
//  УРЛ - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция УРЛ(УРЛ) Экспорт
	
	ОписаниеУРЛ = КоннекторHTTP.РазобратьURL(УРЛ); // BSLLS:MissingCommonModuleMethod-off
	ЗащищенноеСоединение(НРег(ОписаниеУРЛ.Схема) = "https");
	Сервер(ОписаниеУРЛ.Сервер);
	Порт(ОписаниеУРЛ.Порт);
	АдресРесурса(ОписаниеУРЛ.Путь);
	ДобавитьПараметрыЗапроса(ОписаниеУРЛ.ПараметрыЗапроса);
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Инициализировать конструктор HTTP-запроса
//
// Параметры:
//  Сессия - Структура - см. КоннекторHTTP.СоздатьСессию
//  Параметры - Структура - см. КонструкторHTTP.ПараметрыЗапроса
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Инициализировать(Сессия = Неопределено, Параметры = Неопределено, Аутентификация = Неопределено) Экспорт
	
	Если КонструкторHTTPСлужебный.ЭтоСтруктура(Сессия) Тогда
		Сессия(Сессия);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЭтоСтруктура(Параметры) Тогда
		Параметры(Параметры);
	КонецЕсли;
	
	Если КонструкторHTTPСлужебный.ЭтоСтруктура(Аутентификация) Тогда
		Аутентификация(Аутентификация);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор нового контекст
//
// Возвращаемое значение:
//  Структура:
//    * Метод - Строка
//    * ЗащищенноеСоединение - Булево
//    * Сервер - Строка
//    * Порт - Число
//    * АдресРесурса - Строка
//    * ДополнительныеПараметры - Структура - см. КоннекторHTTP.НовыеПараметры
//    * Сессия - Структура - см. КоннекторHTTP.СоздатьСессию
//
Функция НовыйКонтекст()
	
	НовыйКонтекст = Новый Структура;
	НовыйКонтекст.Вставить("Метод", "");
	НовыйКонтекст.Вставить("ЗащищенноеСоединение", Истина);
	НовыйКонтекст.Вставить("Сервер", "");
	НовыйКонтекст.Вставить("Порт", 0);
	НовыйКонтекст.Вставить("АдресРесурса", "");
	НовыйКонтекст.Вставить("ДополнительныеПараметры", КоннекторHTTP.НовыеПараметры()); // BSLLS:MissingCommonModuleMethod-off
	НовыйКонтекст.Вставить("Сессия", КоннекторHTTP.СоздатьСессию()); // BSLLS:MissingCommonModuleMethod-off
	Возврат НовыйКонтекст;
	
КонецФункции

// Подготовить адрес ресурса
//
// Параметры:
//  АдресРесурса - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПодготовитьАдресРесурса(АдресРесурса)
	
	НовыйАдресРесурса = СокрЛП(АдресРесурса);
	
	Если СтрНачинаетсяС(НовыйАдресРесурса, "/") Тогда
		НовыйАдресРесурса = Прав(НовыйАдресРесурса, СтрДлина(НовыйАдресРесурса) - 1);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(НовыйАдресРесурса, "/") Тогда
		НовыйАдресРесурса = Лев(НовыйАдресРесурса, СтрДлина(НовыйАдресРесурса) - 1);
	КонецЕсли;
	
	Возврат НовыйАдресРесурса;
	
КонецФункции

// Подготовить адрес сервера
//
// Параметры:
//  АдресСервера - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПодготовитьАдресСервера(АдресСервера)
	
	НовыйАдресСервера = СокрЛП(НРег(АдресСервера));
	НовыйАдресСервера = СтрЗаменить(НовыйАдресСервера, "https://", "");
	НовыйАдресСервера = СтрЗаменить(НовыйАдресСервера, "http://", "");
	
	Если СтрЗаканчиваетсяНа(НовыйАдресСервера, "/") Тогда
		НовыйАдресСервера = Лев(НовыйАдресСервера, СтрДлина(НовыйАдресСервера) - 1);
	КонецЕсли;
	
	Возврат НовыйАдресСервера;
	
КонецФункции

// Сформировать URL
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьУРЛ()
	
	Фрагменты = Новый Массив;
	
	Если Контекст.ЗащищенноеСоединение Тогда
		Фрагменты.Добавить("https://");
	Иначе
		Фрагменты.Добавить("http://");
	КонецЕсли;
	
	Фрагменты.Добавить(Контекст.Сервер);
	
	Если ЗначениеЗаполнено(Контекст.Порт) Тогда
		Фрагменты.Добавить(":");
		Фрагменты.Добавить(XMLСтрока(Контекст.Порт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контекст.АдресРесурса) Тогда
		Фрагменты.Добавить("/");
		Фрагменты.Добавить(Контекст.АдресРесурса);
	КонецЕсли;
	
	Возврат СтрСоединить(Фрагменты, "");
	
КонецФункции

#КонецОбласти

#Область Инициализация

Контекст = НовыйКонтекст();

#КонецОбласти
