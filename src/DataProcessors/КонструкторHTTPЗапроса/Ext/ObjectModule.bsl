
#Область ОписаниеПеременных

// Контекст конструктора
Перем _Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Установить метод HTTP-запроса
//
// Параметры:
//  Метод - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Метод(Метод) Экспорт
	
	_Контекст.Метод = Метод;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса GET
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодGET() Экспорт
	
	_Контекст.Метод = "GET";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса OPTIONS
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодOPTIONS() Экспорт
	
	_Контекст.Метод = "OPTIONS";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса HEAD
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодHEAD() Экспорт
	
	_Контекст.Метод = "HEAD";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса POST
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPOST() Экспорт
	
	_Контекст.Метод = "POST";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса PUT
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPUT() Экспорт
	
	_Контекст.Метод = "PUT";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса PATCH
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодPATCH() Экспорт
	
	_Контекст.Метод = "PATCH";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить метод HTTP-запроса DELETE
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МетодDELETE() Экспорт
	
	_Контекст.Метод = "DELETE";
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить адрес сервера
//
// Параметры:
//  АдресСервера - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Сервер(АдресСервера) Экспорт
	
	_Контекст.Сервер = ПодготовитьАдресСервера(АдресСервера);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить порт
//
// Параметры:
//  Порт - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Порт(Порт) Экспорт
	
	_Контекст.Порт = Порт;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить адрес ресурса
//
// Параметры:
//  АдресРесурса - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АдресРесурса(АдресРесурса) Экспорт
	
	_Контекст.АдресРесурса = ПодготовитьАдресРесурса(АдресРесурса);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить тело HTTP-запроса
//
// Параметры:
//  ТелоЗапроса - Структура
//              - Массив
//              - Соответствие
//              - ДвоичныеДанные
//              - Строка
//  ЗаписатьJSON - Булево
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ТелоЗапроса(ТелоЗапроса, ЗаписатьJSON = Ложь) Экспорт
	
	Если ЗаписатьJSON Тогда
		_Контекст.ДополнительныеПараметры.JSON = ТелоЗапроса;
	Иначе
		_Контекст.ДополнительныеПараметры.Данные = ТелоЗапроса;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить файл для отправки
//
// Параметры:
//  Имя - Строка - Имя поля формы
//  ИмяФайла - Строка
//  Данные - ДвоичныеДанные - Двоичные данные файла
//         - Неопределено
//  Тип - Строка - MIME-тип файла
//      - Неопределено
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьФайл(Имя, ИмяФайла, Данные = Неопределено, Тип = Неопределено) Экспорт
	
	ОтправляемыйФайл = КоннекторHTTP.НовыйОтправляемыйФайл(Имя, ИмяФайла, Данные, Тип); // BSLLS:MissingCommonModuleMethod-off
	_Контекст.ДополнительныеПараметры.Файлы.Добавить(ОтправляемыйФайл);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить файлы для отправки
//
// Параметры:
//  Файлы - Массив из Структура:
//    * Имя - Строка - Имя поля формы
//    * ИмяФайла - Строка
//    * Данные - ДвоичныеДанные - Двоичные данные файла
//             - Неопределено
//    * Тип - Строка - MIME-тип файла
//          - Неопределено
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьФайлы(Файлы) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		ДобавитьФайл(Файл.Имя, Файл.ИмяФайла, Файл.Данные, Файл.Тип);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить заголовок HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьЗаголовок(Ключ, Значение = "") Экспорт
	
	_Контекст.ДополнительныеПараметры.Заголовки.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить заголовки HTTP-запроса
//
// Параметры:
//  Заголовки - Структура, Соответствие
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьЗаголовки(Заголовки) Экспорт
	
	Для Каждого Заголовок Из Заголовки Цикл
		ДобавитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить Cookie HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКуку(Ключ, Значение = "") Экспорт
	
	_Контекст.ДополнительныеПараметры.Cookies.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить Cookies HTTP-запроса
//
// Параметры:
//  Куки - Структура, Соответствие
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКуки(Куки) Экспорт
	
	Для Каждого Кука Из Куки Цикл
		ДобавитьКуку(Кука.Ключ, Кука.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить параметр HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьПараметрЗапроса(Ключ, Значение = "") Экспорт
	
	Если _Контекст.ДополнительныеПараметры.ПараметрыЗапроса = Неопределено Тогда
		_Контекст.ДополнительныеПараметры.ПараметрыЗапроса = Новый Соответствие;
	КонецЕсли;
	
	_Контекст.ДополнительныеПараметры.ПараметрыЗапроса.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить параметры HTTP-запроса
//
// Параметры:
//  ПараметрыЗапроса - Структура, Соответствия
//    * Ключ - Строка
//    * Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьПараметрыЗапроса(ПараметрыЗапроса) Экспорт
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ДобавитьПараметрЗапроса(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить таймаут выполнения HTTP-запроса
//
// Параметры:
//  Таймаут - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Таймаут(Таймаут) Экспорт
	
	_Контекст.ДополнительныеПараметры.Таймаут = Таймаут;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить код состояния для повтора HTTP-запроса
//
// Параметры:
//  КодСостояния - Число
// 
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКодСостоянияДляПовтора(КодСостояния) Экспорт
	
	Если _Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний = Неопределено Тогда
		_Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний = Новый Массив;
	КонецЕсли;
	
	_Контекст.ДополнительныеПараметры.ПовторятьДляКодовСостояний.Добавить(КодСостояния);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить коды состояния для повтора HTTP-запроса
//
// Параметры:
//  КодыСостояния - Массив из Число
// 
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ДобавитьКодыСостоянияДляПовтора(КодыСостояния) Экспорт
	
	Для Каждого КодСостояния Из КодыСостояния Цикл
		ДобавитьКодСостоянияДляПовтора(КодСостояния);
	КонецЦикла;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать защищенное соединение HTTPS
//
// Параметры:
//  Значение - Булево
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ЗащищенноеСоединение(Значение = Истина) Экспорт
	
	_Контекст.ЗащищенноеСоединение = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Проверять сертификат сервера
//
// Параметры:
//  Значение - Булево, СертификатыУдостоверяющихЦентровФайл
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция ПроверятьSSL(Значение = Истина) Экспорт
	
	_Контекст.ДополнительныеПараметры.ПроверятьSSL = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать клиентский сертификатор SSL
//
// Параметры:
//  Сертификат - СертификатКлиентаФайл, СертификатКлиентаWindows
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция КлиентскийСертификатSSL(Сертификат) Экспорт
	
	_Контекст.ДополнительныеПараметры.КлиентскийСертификатSSL = Сертификат;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать прокси для выполнения HTTP-запроса
//
// Параметры:
//  ИнтернетПрокси - ИнтернетПрокси
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Прокси(ИнтернетПрокси) Экспорт
	
	_Контекст.ДополнительныеПараметры.Прокси = ИнтернетПрокси;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Разрешить перенаправление HTTP-запроса
//
// Параметры:
//  Значение - Булево
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция РазрешитьПеренаправление(Значение = Истина) Экспорт
	
	_Контекст.ДополнительныеПараметры.РазрешитьПеренаправление = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить максимальное время повторов между HTTP-запросами
//
// Параметры:
//  Время - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МаксимальноеВремяПовторов(Время) Экспорт
	
	_Контекст.ДополнительныеПараметры.МаксимальноеВремяПовторов = Время;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить максимальное количество повторов HTTP-запросов
//
// Параметры:
//  Количество - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция МаксимальноеКоличествоПовторов(Количество) Экспорт
	
	_Контекст.ДополнительныеПараметры.МаксимальноеКоличествоПовторов = Количество;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Установить коэффициент экспоненциальной задержки при повторе HTTP-запроса
//
// Параметры:
//  Коэффициент - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция КоэффициентЭкспоненциальнойЗадержки(Коэффициент) Экспорт
	
	_Контекст.ДополнительныеПараметры.КоэффициентЭкспоненциальнойЗадержки = Коэффициент;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать аутентификацию ОС для выполнения HTTP-запроса
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияОС() Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияОС(); // BSLLS:MissingCommonModuleMethod-off
	_Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Basic-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияBasic(Пользователь = "", Пароль = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияBasic(Пользователь, Пароль); // BSLLS:MissingCommonModuleMethod-off
	_Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Digest-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияDigest(Пользователь = "", Пароль = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияDigest(Пользователь, Пароль); // BSLLS:MissingCommonModuleMethod-off
	_Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать AWS4-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  ИдентификаторКлючаДоступа - Строка
//  СекретныйКлюч - Строка
//  Сервис - Строка
//  Регион - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция АутентификацияAWS4(ИдентификаторКлючаДоступа = "", СекретныйКлюч = "", Сервис = "", Регион = "") Экспорт
	
	Аутентификация = КоннекторHTTP.НоваяАутентификацияAWS4( // BSLLS:MissingCommonModuleMethod-off
		ИдентификаторКлючаДоступа, СекретныйКлюч, Сервис, Регион);  
	_Контекст.ДополнительныеПараметры.Аутентификация = Аутентификация;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Отправить HTTP-запрос
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ОбработчикHTTPОтвета
//
Функция Отправить() Экспорт
	
	УРЛ = СформироватьУРЛ();
	Ответ = КоннекторHTTP.ВызватьМетод( // BSLLS:MissingCommonModuleMethod-off
		_Контекст.Метод, УРЛ, _Контекст.ДополнительныеПараметры, _Контекст.Сессия);
	
	Возврат НовыйОбработчикHTTPОтвета().Инициализировать(Ответ);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Инициализировать конструктор HTTP-запроса
//
// Параметры:
//  Сессия - Структура - см. КоннекторHTTP.СоздатьСессию()
//         - Неопределено
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция Инициализировать(Сессия = Неопределено) Экспорт
	
	_Контекст = НовыйКонтекст();
	
	Если ТипЗнч(Сессия) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(_Контекст.Сессия, Сессия);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор нового контекст
//
// Возвращаемое значение:
//  Структура:
//    * Метод - Строка
//    * ЗащищенноеСоединение - Булево
//    * Сервер - Строка
//    * Порт - Число
//    * АдресРесурса - Строка
//    * ДополнительныеПараметры - Структура - см. КоннекторHTTP.НовыеПараметры()
//    * Сессия - Структура - см. КоннекторHTTP.СоздатьСессию()
//
Функция НовыйКонтекст()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Метод", "");
	Контекст.Вставить("ЗащищенноеСоединение", Истина);
	Контекст.Вставить("Сервер", "");
	Контекст.Вставить("Порт", 0);
	Контекст.Вставить("АдресРесурса", "");
	Контекст.Вставить("ДополнительныеПараметры", КоннекторHTTP.НовыеПараметры()); // BSLLS:MissingCommonModuleMethod-off
	Контекст.Вставить("Сессия", КоннекторHTTP.СоздатьСессию()); // BSLLS:MissingCommonModuleMethod-off
	
	Возврат Контекст;
	
КонецФункции

// Конструктор нового обработчка HTTP-ответа
//
// Возвращаемое значение:
//  ОбработкаОбъект.ОбработчикHTTPОтвета
//
Функция НовыйОбработчикHTTPОтвета() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	
	Возврат Обработки.ОбработчикHTTPОтвета.Создать();
	
КонецФункции

// Подготовить адрес сервера
//
// Параметры:
//  АдресСервера - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПодготовитьАдресСервера(АдресСервера)
	
	НовыйАдресСервера = СокрЛП(НРег(АдресСервера));
	НовыйАдресСервера = СтрЗаменить(НовыйАдресСервера, "https://", "");
	НовыйАдресСервера = СтрЗаменить(НовыйАдресСервера, "http://", "");
	
	Если СтрЗаканчиваетсяНа(НовыйАдресСервера, "/") Тогда
		НовыйАдресСервера = Лев(НовыйАдресСервера, СтрДлина(НовыйАдресСервера) - 1);
	КонецЕсли;
	
	Возврат НовыйАдресСервера;
	
КонецФункции

// Подготовить адрес ресурса
//
// Параметры:
//  АдресРесурса - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПодготовитьАдресРесурса(АдресРесурса)
	
	НовыйАдресРесурса = СокрЛП(АдресРесурса);
	
	Если СтрНачинаетсяС(НовыйАдресРесурса, "/") Тогда
		НовыйАдресРесурса = Прав(НовыйАдресРесурса, СтрДлина(НовыйАдресРесурса) - 1);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(НовыйАдресРесурса, "/") Тогда
		НовыйАдресРесурса = Лев(НовыйАдресРесурса, СтрДлина(НовыйАдресРесурса) - 1);
	КонецЕсли;
	
	Возврат НовыйАдресРесурса;
	
КонецФункции

// Сформировать URL
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьУРЛ()
	
	Фрагменты = Новый Массив;
	
	Если _Контекст.ЗащищенноеСоединение Тогда
		Фрагменты.Добавить("https://");
	Иначе
		Фрагменты.Добавить("http://");
	КонецЕсли;
	
	Фрагменты.Добавить(_Контекст.Сервер);
	
	Если ЗначениеЗаполнено(_Контекст.Порт) Тогда
		Фрагменты.Добавить(":");
		Фрагменты.Добавить(XMLСтрока(_Контекст.Порт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_Контекст.АдресРесурса) Тогда
		Фрагменты.Добавить("/");
		Фрагменты.Добавить(_Контекст.АдресРесурса);
	КонецЕсли;
	
	Возврат СтрСоединить(Фрагменты, "");
	
КонецФункции

#КонецОбласти
