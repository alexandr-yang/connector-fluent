
#Область ОписаниеПеременных

// Контекст конструктора
Перем _Контекст;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Инициализировать конструктор HTTP-сессии
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция Инициализировать() Экспорт
	
	_Контекст = НовыйКонтекст();
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить параметры HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция ДобавитьПараметрЗапроса(Ключ, Значение) Экспорт
	
	_Контекст.Сессия.ПараметрыЗапроса.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Basic-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция АутентификацияBasic(Пользователь, Пароль) Экспорт
	
	Аутентификация = Новый Структура;
	Аутентификация.Вставить("Тип", "Basic");
	Аутентификация.Вставить("Пользователь", Пользователь);
	Аутентификация.Вставить("Пароль", Пароль);
	
	_Контекст.Сессия.Аутентификация = Аутентификация;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Использовать Digest-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  Пользователь - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция АутентификацияDigest(Пользователь, Пароль) Экспорт

	Аутентификация = Новый Структура;
	Аутентификация.Вставить("Тип", "Digest");
	Аутентификация.Вставить("Пользователь", Пользователь);
	Аутентификация.Вставить("Пароль", Пароль);

	_Контекст.Сессия.Аутентификация = Аутентификация;

	Возврат ЭтотОбъект;

КонецФункции

// Использовать AWS4-аутентификацию для выполнения HTTP-запроса
//
// Параметры:
//  ИдентификаторКлючаДоступа - Строка
//  СекретныйКлюч - Строка
//  Сервис - Строка
//  Регион - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция АутентификацияAWS4(ИдентификаторКлючаДоступа, СекретныйКлюч, Сервис, Регион) Экспорт

	Аутентификация = Новый Структура;
	Аутентификация.Вставить("Тип", "AWS4-HMAC-SHA256");
	Аутентификация.Вставить("ИдентификаторКлючаДоступа", ИдентификаторКлючаДоступа);
	Аутентификация.Вставить("СекретныйКлюч", СекретныйКлюч);
	Аутентификация.Вставить("Сервис", Сервис);
	Аутентификация.Вставить("Регион", Регион);

	_Контекст.Сессия.Аутентификация = Аутентификация;

	Возврат ЭтотОбъект;

КонецФункции

// Использовать прокси для выполнения HTTP-запроса
//
// Параметры:
//  ИнтернетПрокси - ИнтернетПрокси
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция Прокси(ИнтернетПрокси) Экспорт

	_Контекст.Сессия.Прокси = ИнтернетПрокси;

	Возврат ЭтотОбъект;

КонецФункции

// Проверять сертификат сервера
//
// Параметры:
//  Значение - Булево, СертификатыУдостоверяющихЦентровФайл
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция ПроверятьSSL(Значение) Экспорт

	_Контекст.Сессия.ПроверятьSSL = Значение;

	Возврат ЭтотОбъект;

КонецФункции

// Использовать клиентский сертификатор SSL
//
// Параметры:
//  Сертификат - СертификатКлиентаФайл, СертификатКлиентаWindows
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция КлиентскийСертификатSSL(Сертификат) Экспорт

	_Контекст.Сессия.КлиентскийСертификатSSL = Сертификат;

	Возврат ЭтотОбъект;

КонецФункции

// Добавить заголовок HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция ДобавитьЗаголовок(Ключ, Значение) Экспорт
	
	_Контекст.Сессия.Заголовки.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавить Cookies HTTP-запроса
//
// Параметры:
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция ДобавитьКуки(Ключ, Значение) Экспорт

	_Контекст.Сессия.Cookies.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;

КонецФункции

// Установить максимальное количество перенаправлений HTTP-запроса
//
// Параметры:
//  Количество - Число
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция МаксимальноеКоличествоПеренаправлений(Количество) Экспорт
	
	_Контекст.Сессия.МаксимальноеКоличествоПеренаправлений = Количество;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Создать новую HTTP-сессию 
//
// Возвращаемое значение:
//  Структура - см. КоннекторHTTP.СоздатьСессию()
//
Функция Создать() Экспорт
	
	Возврат _Контекст.Сессия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор нового контекст
//
// Возвращаемое значение:
//  Структура
//    * Сессия - Структура - КоннекторHTTP.СоздатьСессию()
//
Функция НовыйКонтекст()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Сессия", КоннекторHTTP.СоздатьСессию()); // BSLLS:MissingCommonModuleMethod-off
	
	Возврат Контекст;
	
КонецФункции

#КонецОбласти
