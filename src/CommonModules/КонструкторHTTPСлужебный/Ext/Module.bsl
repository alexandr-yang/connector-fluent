
#Область СлужебныйПрограммныйИнтерфейс

#Область Конструкторы

// Конструктор нового конструктора HTTP-запроса
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPЗапроса
//
Функция КонструкторHTTPЗапроса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	Возврат Обработки.КонструкторHTTPЗапроса.Создать();
	
КонецФункции

// Конструктор нового конструктора HTTP-сессии
//
// Возвращаемое значение:
//  ОбработкаОбъект.КонструкторHTTPСессии
//
Функция КонструкторHTTPСессии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	Возврат Обработки.КонструкторHTTPСессии.Создать();
	
КонецФункции

// Конструктор нового обработчка HTTP-ответа
//
// Возвращаемое значение:
//  ОбработкаОбъект.ОбработчикHTTPОтвета
//
Функция ОбработчикHTTPОтвета() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	Возврат Обработки.ОбработчикHTTPОтвета.Создать();
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Это аутентификация AWS4
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоАутентификацияAWS4(Аутентификация) Экспорт
	
	Тип = КонструкторHTTP.ТипАутентификацииAWS4();
	Возврат ЕстьЭлементКоллекции(Аутентификация, "Тип", Тип)
		И ЕстьЭлементКоллекции(Аутентификация, "ИдентификаторКлючаДоступа")
		И ЕстьЭлементКоллекции(Аутентификация, "Регион")
		И ЕстьЭлементКоллекции(Аутентификация, "Сервис")
		И ЕстьЭлементКоллекции(Аутентификация, "СекретныйКлюч");
	
КонецФункции

// Это аутентификация Basic
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоАутентификацияBasic(Аутентификация) Экспорт
	
	Тип = КонструкторHTTP.ТипАутентификацииBasic();
	Возврат ЕстьЭлементКоллекции(Аутентификация, "Тип", Тип)
		И ЕстьЭлементКоллекции(Аутентификация, "Пароль")
		И ЕстьЭлементКоллекции(Аутентификация, "Пользователь");
	
КонецФункции

// Это аутентификация BearerToken
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоАутентификацияBearerToken(Аутентификация) Экспорт
	
	Тип = КонструкторHTTP.ТипАутентификацииBearerToken();
	Возврат ЕстьЭлементКоллекции(Аутентификация, "Тип", Тип)
		И ЕстьЭлементКоллекции(Аутентификация, "Токен");
	
КонецФункции

// Это аутентификация Digest
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоАутентификацияDigest(Аутентификация) Экспорт
	
	Тип = КонструкторHTTP.ТипАутентификацииDigest();
	Возврат ЕстьЭлементКоллекции(Аутентификация, "Тип", Тип)
		И ЕстьЭлементКоллекции(Аутентификация, "Пароль")
		И ЕстьЭлементКоллекции(Аутентификация, "Пользователь");
	
КонецФункции

// Это аутентификация ОС
//
// Параметры:
//  Аутентификация - Структура - см. КонструкторHTTP.ПараметрыАутентификации
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоАутентификацияОС(Аутентификация) Экспорт
	
	Тип = КонструкторHTTP.ТипАутентификацииОС();
	Возврат ЕстьЭлементКоллекции(Аутентификация, "Тип", Тип);
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекциями

// Есть элемент коллекции по ключу или ключу и значению
//
// Параметры:
//  Коллекция - Структура, Соответствие
//  Ключ - Строка
//  Значение - Строка
//
// Возвращаемое значение:
//  - Произвольный
//  - Неопределено - Если элемент не найден
//
Функция ЕстьЭлементКоллекции(Коллекция, Ключ, Значение = Неопределено) Экспорт
	
	НайденноеЗначение = ЗначениеЭлементаКоллекци(Коллекция, Ключ);
	
	Если НайденноеЗначение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Значение = Неопределено
		ИЛИ НРег(Значение) = НРег(НайденноеЗначение);
		
КонецФункции

// Получить значение элемента коллекци по ключу
//
// Параметры:
//  Коллекция - Структура, Соответствие
//  Ключ - Строка
//
// Возвращаемое значение:
//  - Строка
//  - Неопределено - Если элемент не найден
//
Функция ЗначениеЭлементаКоллекци(Коллекция, Ключ) Экспорт
	
	Если ЭтоСтруктура(Коллекция) Тогда
		НайденноеЗначение = Неопределено;
		Коллекция.Свойство(Ключ, НайденноеЗначение);
	Иначе
		НайденноеЗначение = Коллекция.Получить(Ключ);
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Это структура
//
// Параметры:
//  Значение - Произвольный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСтруктура(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип("Структура")
		ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура");
	
КонецФункции

#КонецОбласти

#КонецОбласти
